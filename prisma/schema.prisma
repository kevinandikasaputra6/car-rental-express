generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cars {
  id             Int       @id @default(autoincrement())
  manufacture    String?   @db.VarChar
  type           String?   @db.VarChar
  license_number String?   @db.VarChar(30)
  seat           Int?
  baggage        Int?
  transmision    String?   @db.VarChar
  year           String?   @db.VarChar
  name           String?   @db.VarChar
  description    String?
  is_driver      Boolean?
  is_available   Boolean?  @default(true)
  img            String?
  price          Int?
  create_dt      DateTime? @default(now()) @db.Timestamp(6)
  update_dt      DateTime? @updatedAt
  create_by      String?   @db.VarChar
  update_at      String?   @db.VarChar
  orders         orders[]

  @@index([name], map: "car_name_index")
}

model orders {
  id          Int       @id @default(autoincrement())
  order_no    String    @unique @db.VarChar
  cars_id     Int
  users_id    Int
  start_time  DateTime? @db.Timestamp(6)
  finish_time DateTime? @db.Timestamp(6)
  total       Float?
  is_driver   Boolean?
  is_expired  Boolean?
  status      String?   @db.VarChar
  is_deleted  Boolean?
  create_dt   DateTime? @default(now()) @db.Timestamp(6)
  update_dt   DateTime? @updatedAt
  create_by   String?   @db.VarChar
  update_at   String?   @db.VarChar
  cars        cars      @relation(fields: [cars_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id             Int       @id @default(autoincrement())
  fullname       String?   @db.VarChar
  email          String    @unique @db.VarChar(30)
  address        String?   @db.VarChar
  password       String    @db.VarChar
  avatar         String?
  gender         String?   @db.VarChar
  phone_number   String?   @unique @db.VarChar
  driver_license String?
  birth_date     String?
  role_id        Int
  create_dt      DateTime? @default(now()) @db.Timestamp(6)
  update_dt      DateTime? @updatedAt
  create_by      String?   @db.VarChar
  update_at      String?   @db.VarChar
  orders         orders[]
  role           roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model roles {
  id        Int       @id @default(autoincrement())
  role      String    @unique
  create_dt DateTime? @default(now()) @db.Timestamp(6)
  update_dt DateTime? @updatedAt
  create_by String?   @db.VarChar
  update_at String?   @db.VarChar
  access    access[]
  users     users[]
}

model menus {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  title      String
  icon       String?
  path       String?
  is_submenu Boolean?  @default(false)
  parent_id  Int?
  permission String[]
  create_dt  DateTime? @default(now()) @db.Timestamp(6)
  update_dt  DateTime? @updatedAt
  create_by  String?   @db.VarChar
  update_at  String?   @db.VarChar
  submenu    menus?    @relation("submenu", fields: [parent_id], references: [id])
  parent     menus[]   @relation("submenu")
  access     access[]
}

model access {
  id        Int       @id @default(autoincrement())
  role_id   Int
  menu_id   Int
  visible   Boolean?  @default(true)
  grant     Json
  create_dt DateTime? @default(now()) @db.Timestamp(6)
  update_dt DateTime? @updatedAt
  create_by String?   @db.VarChar
  update_at String?   @db.VarChar
  roles     roles     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  menu      menus     @relation(fields: [menu_id], references: [id], onDelete: Cascade)
}
